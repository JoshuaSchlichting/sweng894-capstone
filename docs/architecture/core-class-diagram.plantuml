@startuml
' skinparam linetype polyline
' skinparam linetype ortho
namespace core{
    class User{
        id: int
        name: str
        phone_number: str
        email_address: str
    }

    class Voter {
        +party: str
    }
    class Candidate{
        +party: str
    }

    class Admin extends User{

    }

    Voter -up-|> User
    Candidate -up-|> User

    class Election{
        +id: int
        +candidates: set
    }


    class Vote{
        +id: int
        +cast_by: int
        +ranked_candidates: tuple
        +timestamp: datetime
    }

    class BaseApi{}

    class UserApi extends BaseApi{
        +__init__(token: dict)
        +retrieve_election_report(election_id: int)
        +log_in(username: str, password: str)
    }
    UserApi --> User : << uses >>
    UserApi --> AbstractDataAccessLayer : << uses >>
    UserApi --> ElectionSystem : <<uses>>

    class VoterApi extends BaseApi{
        +cast_vote(user_id: int, ranked_candidates: list, election_id: int)
    }
    VoterApi --> AbstractDataAccessLayer : << uses >>
    VoterApi --> Vote : <<creates>>



    class ApiFactory{
        +create_voter_api() -> VoterApi
        +create_admin_api() -> AdminApi
        +create_user_api() -> UserApi
    }

    ApiFactory --> VoterApi : <<creates>>
    ApiFactory --> AdminApi : <<creates>>
    ApiFactory --> UserApi : <<creates>>

    abstract class AbstractDataAccessLayer{
        +{abstract}create_user(user_name: str) -> int
        +{abstract}cast_vote(user_id: int, election_id: int, ranked_candidates: List[int]) -> int
        +{abstract}create_candidate(user_name: str) -> int
        +{abstract}create_election(election_name: str) -> int
        +{abstract}get_user_info_by_id(user_id: int) -> dict
        +{abstract}get_user_info_by_name(username: str) -> dict
    }

    class ElectionSystem{
        +get_election_report(election_id: int): dict
        +end_election(election_id: int)
    }
    AdminApi --> ElectionSystem : <<uses>>
    class AdminApi extends BaseApi{
        +__init__(token: dict)
        +create_user(usename: str)
        +create_candidate(username: str)
        +create_election(election_name: str, candidates: List[str])
        +declare_winner(election_id: int)
    }
    AdminApi --> Election : <<creates>>
    AdminApi --> AbstractDataAccessLayer : << uses >>
    AdminApi --> User : << creates >>
    AdminApi --> Candidate : << creates >>
    AdminApi --> Vote : << creates >>
}

namespace presentation_layer{

}

presentation_layer -> core.UserApi : <<calls>>
presentation_layer -> core.AdminApi : <<calls>>
presentation_layer -> core.VoterApi : <<calls>>

@enduml