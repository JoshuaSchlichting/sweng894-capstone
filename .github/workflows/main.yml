
name: CICD Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ECR_REPOSITORY: votesystem
  REGION: us-east-1

jobs:
  build-and-push:

    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
   
        

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check out code
      uses: actions/checkout@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: votesystem${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd vote_system
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"}

  deploy-to-cluster:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    # - uses: prepor/action-aws-iam-authenticator@master
    # - run: aws-iam-authenticator version

    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    # - name: add deployment to cluster
    #   uses: steebchen/kubectl@v2.0.0
    #   with: # defaults to latest kubectl binary version
    #     config: ${{ secrets.KUBE_CONFIG_DATA }}
    #     command: apply -f vote_system/kubernetes-deployment.yaml

    # - name: deploy to cluster
    #   uses: steebchen/kubectl@v2.0.0
    #   with: # defaults to latest kubectl binary version
    #     config: ${{ secrets.KUBE_CONFIG_DATA }}
    #     command: set image --record deployment/${{ env.ECR_REPOSITORY }} container=${{ github.repository }}:${{ github.sha }}
    - run: ls -al
    - name: add deployment to cluster
      uses: Jberlinsky/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f vote_system/kubernetes_deployment.yaml


    - name: deploy to cluster
      uses: Jberlinsky/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: set image --record deployment/${{ env.ECR_REPOSITORY }} container=${{ github.repository }}:${{ github.sha }}
    # - name: verify deployment
    #   uses: steebchen/kubectl@v2.0.0
    #   with:
    #     config: ${{ secrets.KUBE_CONFIG_DATA }}
    #     version: v1.21.0 # specify kubectl binary version explicitly
    #     command: rollout status deployment/${{ env.ECR_REPOSITORY }}
