{% extends "main.html.jinja" %}

{% block main %}
  <p>Add candidate to election</p>
  <label for="candidatesGrid">Select candidate to participate in election:</label>
  <div id="candidatesGrid" style="height: 200px; width:500px;" class="ag-theme-alpine"></div>
{% endblock %}

{% block javascript %}
  <script src="https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.js"></script>
  <script type="text/javascript">

    $("#electionGrid").ready(function(e) {
      $.ajax({
        type: "GET",
        url: "election/all",
        data: form.serialize(), // serializes the form's elements.
        success: function(data)
        {
            for(let i = 0; i < electionRowData.length; i++){
                rowData.push(data.candidates[i]);
            }
        }
      });
    )};


    $("#candidatesGrid").ready(function(e) {
      $.ajax({
        type: "GET",
        url: "election",
        data: form.serialize(), // serializes the form's elements.
        success: function(data)
        {
            alert("Election created! Election ID: " + data.electionId);
            document.getElementById("createElectionForm").reset();
            for(let i = 0; i < rowData.length; i++){
                rowData.push(data.candidates[i]);
            }
        }
      });
    )};



    $("#createElectionForm").submit(function(e) {

      e.preventDefault(); // avoid to execute the actual submit of the form.

      var form = $(this);
      var url = form.attr('action');

      $.ajax({
        type: "POST",
        url: url,
        headers: getJwtHeader(),
        data: form.serialize(), // serializes the form's elements.
        success: function(data)
        {
            alert("Election created! Election ID: " + data.electionId);
            document.getElementById("createElectionForm").reset();
        }
      });
    });

    function CheckboxRenderer() {}

    CheckboxRenderer.prototype.init = function(params) {
        this.params = params;

        this.eGui = document.createElement('input');
        this.eGui.type = 'checkbox';
        this.eGui.checked = params.value;

        this.checkedHandler = this.checkedHandler.bind(this);
        this.eGui.addEventListener('click', this.checkedHandler);
    }

    CheckboxRenderer.prototype.checkedHandler = function(e) {
        let checked = e.target.checked;
        let colId = this.params.column.colId;
        this.params.node.setDataValue(colId, checked);
    }

    CheckboxRenderer.prototype.getGui = function(params) {
        return this.eGui;
    }

    CheckboxRenderer.prototype.destroy = function(params) {
        this.eGui.removeEventListener('click', this.checkedHandler);
    }


    
    const columnDefs = [
        { field: "Candidate" }
    ];

        // specify the data
    let candidateRowData = [
        { Candidate: "Celica" },
        { Candidate: "test user" }
    ];

        // let the grid know which columns and what data to use
    const gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData
    };
    gridOptions.components = {
        checkboxRenderer: CheckboxRenderer
    }
    // setup the grid after the page has finished loading
    document.addEventListener('DOMContentLoaded', () => {
        const gridDiv = document.querySelector('#candidatesGrid');
        new agGrid.Grid(gridDiv, gridOptions);
    });

  </script>
{% endblock %}